let bindTap = document.getElementsByClassName("bindTap");
for (let i = 0; i < bindTap.length; i++) {
    let clicker = bindTap[i];
    switch (i) {
        case 0:
            clicker.addEventListener("click", () => {
                console.log("Debugger without semicolon");
                let a = 1,
                    b = 2;
                debugger
                let c = a + b;
                console.log(c)
            })
            break;
        case 1:
            clicker.addEventListener("click", () => {
                console.log("Debugger with semicolon");
                let a = 1,
                    b = 2;
                debugger;
                let c = a + b;
                console.log(c)
            })
            break;
        case 2:
            clicker.addEventListener("click", () => {
                console.log("(Multi-statement) debugger with statement behind");
                let a = 1,b = 2;
				debugger;let c = a+b;
                console.log(c)
            })
            break;
        case 3:
            clicker.addEventListener("click", () => {
                console.log("(Multi-statement) debugger with statements before and after");
                let a = 1,b = 2;debugger;let c = a+b;
                console.log(c)
            })
            break;
        case 4:
            clicker.addEventListener("click", () => {
                console.log("(Multiple statements) debugger with statements in front");
                let a = 1,b = 2;debugger
				let c = a+b;
                console.log(c)
            })
            break;
        case 5:
            clicker.addEventListener("click", () => {
                console.log("Debugger generated by Function");
                let fn = new Function("debu" + "gger");
                fn()
                console.log("Try to run")
            })
            break;
        case 6:
            clicker.addEventListener("click", () => {
                console.log("Multi-parameter debugger generated by Function");
                let fn = new Function("x", "debugger");
                fn()
                console.log("Try to run")
            })
            break;
        case 7:
            clicker.addEventListener("click", () => {
                console.log("Prevent simple detection");
                let a = ";debugger;"
                if (a !== ";debug" + "ger;") {
                    console.log("Abnormal user behavior")
                }
                debugger
                console.log("If there is no exception, the verification is passed")
            })
            break;
        case 8:
            clicker.addEventListener("click", () => {
                console.log("Use eval to execute debugger");
                eval("debugger");
                console.log("Finished running")
            })
            break;
        case 9:
            clicker.addEventListener("click", () => {
                console.log("Use Function.prototype.constructor execute debugger");
                Function.prototype.constructor("debugger")()
                console.log("Finished running")
            })
            break;
        case 10:
            clicker.addEventListener("click", () => {
                console.log("Use Function.prototype.The constructor executes the debugger (after confusion)");
                function xhs__0x4f79(x){switch(x){case"0x1e3":return"constructor";case"0x5c6":return"vyxZy";case"0x5ca":return"wcluU";case"0x5d0":return"tOyvN";default:throw new RangeError(x)}}var _0x2764ed={wcluU:"debu",tvBGO:"gger",tOyvN:"action",vyxZy:function(x,e){return x+e}};(function(){})[xhs__0x4f79("0x1e3")](_0x2764ed[xhs__0x4f79("0x5c6")](_0x2764ed[xhs__0x4f79("0x5ca")],_0x2764ed.tvBGO)).call(_0x2764ed[xhs__0x4f79("0x5d0")]);
                console.log("Finished running")
            })
            break;
        default:
            clicker.addEventListener("click", () => { 
                console.log("system error", i);
                console.log("system error" + i)
                throw new RangeError("system error" + i);
            })
            break;
    }
}